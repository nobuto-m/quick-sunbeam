name: Single-node How-to Guide

on:
  #push:
  #  branches: ["main"]

  workflow_dispatch:
    inputs:
      use_workaround:
        description: 'Apply a workaround'
        required: true
        default: true
        type: boolean
      hardware_profile:
        description: 'Specs for each machine'
        required: true
        default: tutorial
        type: choice
        options:
          - tutorial
          - allowance

permissions:
  contents: read

env:
  COLUMNS: 160  # default: 80
  DEBIAN_FRONTEND: noninteractive
  # github.event.inputs.use_workaround returns a string
  # - non-empty 'true' or 'false' from the workflow_dispatch
  # - '' from the on-push event
  # set the default value as true only when there is no input
  USE_WORKAROUND: ${{ github.event.inputs.use_workaround || true }}
  HARDWARE_PROFILE: ${{ inputs.hardware_profile || 'tutorial' }}

defaults:
  run:
    # act doesn't show a good summary of elapsed time of each step, and
    # having an unnecessary `bash -e -c` at the beginning is for
    # actionlint to activate shellcheck.
    shell: bash -e -c "date --utc -Isec; /usr/bin/time -f \"\nStep total time:\t%E\" bash -ex {0}"

jobs:
  actionlint:
    runs-on: [self-hosted, linux, AMD64, X64, large, noble]
    steps:
      - uses: actions/checkout@v4
      - name: Download actionlint
        if: ${{ !env.ACT }}
        id: get_actionlint
        run: bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
      - name: Install prerequisites for actionlint
        if: ${{ !env.ACT }}
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
      - name: Check workflow files
        run: |
          # use a local binary if env.ACT
          ${{ steps.get_actionlint.outputs.executable || 'actionlint' }} -color \
              .github/workflows/single-node.yml
  single-node-how-to:
    name: Single-node How-to Guide
    runs-on: [self-hosted, linux, AMD64, X64, large, noble]
    needs: actionlint
    steps:
      - uses: actions/checkout@v4
      - name: Set env
        run: |
          case "$HARDWARE_PROFILE" in
              tutorial)
                  # https://canonical-openstack.readthedocs-hosted.com/en/latest/reference/enterprise-requirements/#single-node
                  echo CPU=4             >> "$GITHUB_ENV"
                  echo MEMORY=16         >> "$GITHUB_ENV"
                  echo DISK=100          >> "$GITHUB_ENV"
                  echo EXTRA_DISK=100    >> "$GITHUB_ENV"
              ;;
              allowance)
                  # https://canonical-openstack.readthedocs-hosted.com/en/latest/reference/enterprise-requirements/
                  echo CPU=16            >> "$GITHUB_ENV"
                  echo MEMORY=32         >> "$GITHUB_ENV"
                  echo DISK=500          >> "$GITHUB_ENV"
                  echo EXTRA_DISK=500    >> "$GITHUB_ENV"
              ;;
              *)
                  echo '::error:: Invalid hardware profile'
                  exit 1
              ;;
          esac
          # shellcheck source=/dev/null
          source "$GITHUB_ENV"
          cat >> "$GITHUB_STEP_SUMMARY" <<EOF
          ## Hardware profile
          | Hardware profile  | $HARDWARE_PROFILE |
          | ----------------- | ----------------- |
          | CPU (cores)       | $CPU              |
          | Memory (GB)       | $MEMORY           |
          | Root Disk (GB)    | $DISK             |
          | Extra Disk (GB)   | $EXTRA_DISK       |
          EOF
          if [ "$USE_WORKAROUND" = true ]; then
              echo '::warning::Not a clean run. Some workarounds are going to be used.'
              echo '## :construction: Workaround' >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Check runner specs
        run: |
          # bare metal returns "none" with exit 1
          systemd-detect-virt || true
          cat /etc/os-release
          lscpu
          free -h
          lsblk -e7
          lsblk -e7 -f
          if [ "$RUNNER_DEBUG" = 1 ]; then
              lsblk
              lsblk -f
              # IPv6 address can be sensitive
              ip -br a
              ip r
              resolvectl --no-pager
          fi
          echo 'check the memory size and bail out when no enough memory for a machine to be created'
          [ "$(( $(grep MemTotal: /proc/meminfo | awk '{print $2}') / 1024**2 ))" -ge "$MEMORY" ]
      - name: Install prerequisites
        if: ${{ !env.ACT }}
        run: |
          sudo apt-get update
          sudo apt-get install -y uvtool j2cli
          # make sure the default user is in the libvirt group.
          # the "runner" user in Github workflow is not in the sudo
          # group so it's not automatically added into the libvirt
          # group.
          sudo adduser "$USER" libvirt
      - name: Download an OS image
        if: ${{ !env.ACT }}
        run: |
          sudo -g libvirt uvt-simplestreams-libvirt sync release=noble arch=amd64
          sudo -g libvirt uvt-simplestreams-libvirt query
      - name: Prepare SSH and a network bridge
        if: ${{ !env.ACT }}
        run: |
          # SSH
          ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N ''
          tee -a ~/.ssh/config < .github/assets/workflows/ssh_config

          # bridge
          sudo -g libvirt virsh -c qemu:///system net-define .github/assets/workflows/sunbeam-virbr0.xml
          sudo -g libvirt virsh -c qemu:///system net-autostart sunbeam-virbr0
          sudo -g libvirt virsh -c qemu:///system net-start sunbeam-virbr0
      - name: Clean up previous machines
        if: ${{ env.ACT }}
        run: |
          # FIXME: the requirement of FQDN is not documented well in each tutorial
          sudo -g libvirt uvt-kvm destroy sunbeam-single-node.localdomain || true
          ssh-keygen -R 192.168.124.21 || true
      - name: Prepare a machine
        run: |
          sudo -g libvirt uvt-kvm create \
              --machine-type q35 \
              --cpu "$CPU" \
              --host-passthrough \
              --memory "$((MEMORY * 1024))" \
              --disk "$DISK" \
              --ephemeral-disk "$EXTRA_DISK" \
              --ephemeral-disk "$EXTRA_DISK" \
              --unsafe-caching \
              --bridge sunbeam-virbr0 \
              --network-config /dev/stdin \
              --ssh-public-key-file ~/.ssh/id_ed25519.pub \
              --no-start \
              sunbeam-single-node.localdomain \
              release=noble <<EOF
          network:
            version: 2
            ethernets:
              enp1s0:
                dhcp4: false
                dhcp6: false
                accept-ra: false
                addresses:
                  - 192.168.124.21/24
                routes:
                  - to: default
                    via: 192.168.124.1
                nameservers:
                  addresses:
                    - 192.168.124.1
          EOF

          # secondary NIC
          sudo -g libvirt virsh -c qemu:///system attach-interface sunbeam-single-node.localdomain \
              network sunbeam-virbr0 \
              --model virtio --config

          sudo -g libvirt virsh -c qemu:///system start sunbeam-single-node.localdomain

          until ssh -oStrictHostKeyChecking=no sunbeam-single-node -- 'systemctl is-system-running --wait; ip -br a; lsblk'; do
              sleep 5
          done

          # LP: #2065911
          if [ "$USE_WORKAROUND" = true ]; then
              echo '- https://launchpad.net/bugs/2065911' >> "$GITHUB_STEP_SUMMARY"
              ssh sunbeam-single-node -- 'sudo install -m 0600 /dev/stdin /etc/netplan/90-local-ovs-ext-port.yaml <<EOF
          network:
            version: 2
            ethernets:
              # LP: #2065911
              enp9s0:
                dhcp4: false
                dhcp6: false
                accept-ra: false
          EOF
                  sudo netplan apply
              '
          fi
      - name: Sunbeam - Prepare manifest file
        run: |
          if [ "$USE_WORKAROUND" = true ]; then
              echo '- https://launchpad.net/bugs/2098823' >> "$GITHUB_STEP_SUMMARY"
          fi
          j2 -f yaml -o ./manifest.yaml .github/assets/workflows/single-node/manifest.yaml.j2 - <<EOF
          use_workaround: $USE_WORKAROUND
          dockerhub_mirror: $DOCKERHUB_MIRROR
          EOF
          scp ./manifest.yaml sunbeam-single-node:
      - name: Sunbeam - Prepare the machine
        run: |
          ssh sunbeam-single-node -- sudo snap install openstack --channel 2024.1/edge
          ssh sunbeam-single-node -- 'sunbeam prepare-node-script --bootstrap | bash -x'
      - name: Sunbeam - Bootstrap the cloud
        run: |
          # -t is necessary to see some progress in act env, LP: #2097451
          # Also, without -t, somehow add-k8s command gets stuck in act env
          # although it doesn't happen in GitHub runner.
          # without -tt, GitHub runner's log should be quiet.
          if [ "$USE_WORKAROUND" = true ]; then
              echo '- https://launchpad.net/bugs/2100289' >> "$GITHUB_STEP_SUMMARY"
              ssh sunbeam-single-node -t -- sunbeam cluster bootstrap \
                  --role control,compute,storage \
                  --manifest manifest.yaml \
                  --database single  # LP: #2100289
          else
              ssh sunbeam-single-node -t -- sunbeam cluster bootstrap \
                  --role control,compute,storage \
                  --manifest manifest.yaml
          fi
      - name: Workaround - destroy localhost controller
        if: ${{ env.USE_WORKAROUND }}
        run: |
          # LP: #2098915
          echo '- https://launchpad.net/bugs/2098915' >> "$GITHUB_STEP_SUMMARY"
          ssh sunbeam-single-node -- '
              set -ex
              lxc network list
              sunbeambr0_ip="$(lxc network show sunbeambr0 | grep ipv4.address: | awk '\''{print $2}'\'' | cut -d / -f1)"
              deployment="$(sunbeam deployment list --format yaml | grep active: | awk '\''{print $2}'\'')"
              juju show-cloud -c sunbeam-controller "${deployment}-k8s"
              sed -i -e "s/${sunbeambr0_ip}/192.168.124.21/" ~/.local/share/juju/clouds.yaml
              juju update-cloud -c sunbeam-controller "${deployment}-k8s"
              juju show-cloud -c sunbeam-controller "${deployment}-k8s"
          '
          # LP: #2095487, without doing it, a random /24 range will be
          # dead from a user perspective and the OpenStack API cannot
          # return a response to the range since it will go to the
          # unused network bridge.
          echo '- https://launchpad.net/bugs/2095487' >> "$GITHUB_STEP_SUMMARY"
          ssh sunbeam-single-node -- juju destroy-controller localhost-localhost --no-prompt
          ssh sunbeam-single-node -- lxc profile device remove default eth0
          ssh sunbeam-single-node -- lxc network delete sunbeambr0
      - name: Sunbeam - Configure the cloud
        run: |
          ssh sunbeam-single-node -t -- sunbeam configure --openrc demo-openrc
      - name: Sunbeam - Launch a VM
        run: |
          ssh sunbeam-single-node -t -- sunbeam launch ubuntu --name test
      - name: Sunbeam - Connect to the VM
        run: |
          # The cloud-init process inside the VM takes ~2 minutes to bring up the
          # SSH service after the VM gets ACTIVE in OpenStack
          sleep 5m
          ssh sunbeam-single-node -- '
              set -ex
              source demo-openrc
              demo_floating_ip="$(openstack floating ip list -c Floating\ IP\ Address -f value | head -n1)"
              ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i ~/snap/openstack/current/sunbeam "ubuntu@${demo_floating_ip}" -- systemctl is-system-running --wait
          '
      - name: Save admin-openrc
        run: |
          ssh sunbeam-single-node -t -- 'sunbeam openrc > admin-openrc'
      - name: Enable Tempest
        run: |
          ssh sunbeam-single-node -t -- sunbeam enable validation
      - name: Run Tempest smoke tests
        run: |
          # TODO: collect logs
          # debugging for LP: #2100739
          ssh sunbeam-single-node -- juju show-unit -m openstack tempest/0 | grep leader_ready || true
          ssh sunbeam-single-node -- juju ssh -m openstack --container tempest tempest/0 'ls -alF /var/lib/tempest/workspace/'
          ssh sunbeam-single-node -- sunbeam validation run smoke --output ./tempest-validation.log | tee -a "$GITHUB_STEP_SUMMARY"
          sleep 6m  # more than the update-status hook interval
          ssh sunbeam-single-node -- juju show-unit -m openstack tempest/0 | grep leader_ready || true
          ssh sunbeam-single-node -- juju ssh -m openstack --container tempest tempest/0 'ls -alF /var/lib/tempest/workspace/'
          ssh sunbeam-single-node -- sunbeam validation run smoke --output ./tempest-validation.log | tee -a "$GITHUB_STEP_SUMMARY"
          # LP: #2098851
          #echo '- https://launchpad.net/bugs/2098851' >> "$GITHUB_STEP_SUMMARY"
          #ssh sunbeam-single-node -- juju run -m openstack tempest/leader get-lists
          #ssh sunbeam-single-node -- juju run -m openstack tempest/leader validate test-list=refstack-2022.11 serial=true --wait=30m
          #ssh sunbeam-single-node -- juju scp -m openstack --container tempest tempest/0:/var/lib/tempest/workspace/tempest-validation.log ./tempest-validation.log
          # TODO: check the output
      - name: Smoke testing - Host reboot
        run: |
          ssh sunbeam-single-node -- sudo reboot
          # wait some time to settle
          sleep 15m
          ssh sunbeam-single-node -t -- '
              set -ex
              uptime -p
              sunbeam launch ubuntu --name test-after-reboot
              sleep 5m
              source demo-openrc
              ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i ~/snap/openstack/current/sunbeam -l ubuntu \
                  "$(openstack server show test-after-reboot --format yaml | grep -E -o 192\.168\.124\.[0-9]+)" -- systemctl is-system-running --wait
          '
      - name: Run Tempest RefStack again
        run: |
          ssh sunbeam-single-node -t -- sunbeam validation run refstack
      - name: Collect logs
        if: ${{ always() }}
        run: |
          set +e
          ssh sunbeam-single-node -- '
              set -x
              mkdir logs
              cd logs/
              rsync -arv ~/snap/openstack/common/logs/ snap_openstack_common_logs/
              cp -v ../tempest-validation.log .
              sunbeam cluster list | tee sunbeam_cluster_list.txt
              sudo microceph status | tee microceph_status.txt
              sudo microceph disk list | tee microceph_disk_list.txt
              sudo ceph status | tee ceph_status.txt
              sudo ceph health detail | tee ceph_health_detail.txt
              sudo ceph osd pool autoscale-status | tee ceph_autoscale_status.txt
              sudo k8s status | tee k8s_status.txt
              sudo k8s kubectl get all -A | tee k8s_kubectl_get_all_-A.txt
              sudo k8s kubectl describe all -A > k8s_kubectl_describe_all_-A.txt
              juju controllers --refresh | tee juju_controllers.txt
              mkdir juju/
              for model in $(juju models --format json | jq -r .models[].name); do
                  juju status -m "$model" --relations > "juju/status_${model##*/}.txt"
                  juju status -m "$model" --color | tee "juju/status_${model##*/}_color.txt"
                  juju debug-log -m "$model" --date --replay > "juju/debug_${model##*/}.log"
              done
          '
          rsync -arv --mkpath sunbeam-single-node:logs/ logs/
      - name: Collect sosreport
        if: ${{ always() }}
        run: |
          set +e
          ssh sunbeam-single-node -- '
              set -x
              sudo sos report --batch --all-logs --tmp-dir .
              sudo chown $USER: sosreport-*.tar.xz
          '
          scp sunbeam-single-node:sosreport-*.tar.xz .
      - name: Upload manifest.yaml
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: manifest.yaml
          path: ./manifest.yaml
      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: logs
          path: ./logs/
      - name: Upload sosreport
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: sosreport.tar.xz
          path: ./sosreport-*.tar.xz
          retention-days: 7
